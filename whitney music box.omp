; OM File Header - Saved 2023/10/10 16:35:27
; (7.02 :patc (om-make-point 350 128) (om-make-point 1890 208) (om-make-point 1198 1025) "" 183 0 nil "2023/10/10 16:35:27")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../out-files/.aiff\""))
(in-package :om)(load-lib-for (quote ("omprisma" "OMChroma")))(setf *om-current-persistent* (om-load-patch1 "whitney music box" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 162 30) (quote "start frequency (lowest)") nil (om-make-point 603 194) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 168 30) (quote "global sound duration (s)") nil (om-make-point 423 200) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRISMA-SETUP 2" (quote prisma-setup) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "SETUP-DATA" (list (list -0.5 0.8660254) (list 0.5 0.8660254)) (list (list "stereo" (quote *prisma-lsconfig-stereo*)) (list "3.0" (quote *prisma-lsconfig-3.0*)) (list "quad" (quote *prisma-lsconfig-quad*)) (list "5.0" (quote *prisma-lsconfig-5.0*)) (list "hexagon.1" (quote *prisma-lsconfig-hexa1*)) (list "hexagon.2" (quote *prisma-lsconfig-hexa2*)) (list "7.0" (quote *prisma-lsconfig-7.0*)) (list "octagon.1" (quote *prisma-lsconfig-octo1*)) (list "octagon.2" (quote *prisma-lsconfig-octo2*)) (list "cube.1" (quote *prisma-lsconfig-cube*)))))) (om-make-point 575 270) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE 4" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (:name :sr :rescale :run :evt-test :resolution :kr :tables :nchnls :globals :patch :sound :duration)" "Keyword input" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "inits" (quote :inits) nil nil))) (om-make-point 478 347) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 ".aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 491 432) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "" :type "aiff") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj ".aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 208 25) (om-make-point 1048 572) 0 nil 1 (quote :om-audio) nil nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 178 45) (quote "number of sound elements$") nil (om-make-point 249 197) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 655 225) (om-make-point 34 30) 55 "55" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 370 242) (om-make-point 34 30) 48 "48" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 455 237) (om-make-point 41 30) 180 "180" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "make matrices" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "n" nil) (om-load-inputfun (quote input-funbox) "" "dur" nil) (om-load-inputfun (quote input-funbox) "" "startfreq" nil))) (om-make-point 428 277) nil nil nil (list (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list -1 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 -1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 5))) (om-make-point 658 294) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-1.0 1.0)) (quote (1.0 -1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 2721 654) (om-make-point 552 362))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 698 524) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 581 474) (om-make-point 22 26) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 474 212) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 554 119) (om-make-point 32 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 601 192) (om-make-point 23 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number or list" "DIVISOR" 1))) (om-make-point 497 149) (om-make-point 40 59) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 3" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 514 311) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONDITIONAL 2" (quote conditional) (quote ((om-load-inputfun (quote input-funbox) "test" "TEST" nil) (om-load-inputfun (quote input-funbox) "add-test" "ADDTEST" (quote t)))) (om-make-point 489 377) (om-make-point 88 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 561 238) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list -1 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list -1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 5))) (om-make-point 600 239) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-1.0 1.0)) (quote (-1.0 1.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF 2") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 2721 654) (om-make-point 552 362))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PAN.DISCRETE" (quote pan.discrete) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) 0 nil) (om-load-inputkeyword (quote editor-keyword) "" "soundfile" (quote :soundfile) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "gain-env" (quote :gain-env) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) nil) (om-load-inputkeyword (quote editor-keyword) "" "xpos" (quote :xpos) 0 nil) (om-load-inputkeyword (quote editor-keyword) "" "ypos" (quote :ypos) 0 nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "gain" (quote :gain) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "startpos" (quote :startpos) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "zpos" (quote :zpos) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "atten-fun" (quote :atten-fun) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "air-fun" (quote :air-fun) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "time-fun" (quote :time-fun) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "reference-distance" (quote :reference-distance) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "pan-fun" (quote :pan-fun) nil nil))) (om-make-point 443 507) (om-make-point 202 97) (let ((rep (if (find-class (quote pan.discrete) nil) (let ((rep (make-instance (quote pan.discrete) :numcols 48))) (when (member (quote e-dels) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote durs)) 0)) (when (member (quote soundfile) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote soundfile)) nil)) (when (member (quote gain) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote gain)) 0)) (when (member (quote gain-env) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote gain-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote startpos) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote startpos)) 0)) (when (member (quote xpos) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote xpos)) (list -1 1))) (when (member (quote ypos) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote ypos)) 0)) (when (member (quote zpos) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote zpos)) 0)) (when (member (quote atten-fun) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote atten-fun)) 1)) (when (member (quote air-fun) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote air-fun)) 0)) (when (member (quote time-fun) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote time-fun)) 0)) (when (member (quote reference-distance) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote reference-distance)) 1)) (when (member (quote pan-fun) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote pan-fun)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 1512 302) (om-make-point 1789 736) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "group 1" (list 0 nil) (list 1 nil) (list 2 (quote t)) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 (quote t)) (list 7 (quote t)) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil)) (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil))))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHROMA-PRISMA" (quote chroma-prisma) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SYNTH" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SPAT" nil))) (om-make-point 341 730) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 349 206) (om-make-point 24 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 179 367) (om-make-point 24 36) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 400) (om-load-inputfun (quote input-funbox) "step" "STEP" 10))) (om-make-point 104 426) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 367 793) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 341 123) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 262 370) (om-make-point 31 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "startfreq" 2 (om-make-point 219 304) "" "startfreq" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil))) (om-make-point 35 515) (om-make-point 200 50) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 10))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 10)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (listwhen (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 0 0 0 0 0 0 0 0 0) (list 10 10 10 10 10 10 10 10 10 10) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 50 51 52 53 54 55 56 57 58 59) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 1169 490) (om-make-point 10 40))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "dur" 1 (om-make-point 125 306) "" "dur" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n" 0 (om-make-point 65 52) "" "n" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 411 854) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 303 863) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((6 1 3 0 nil 0) (13 0 6 0 nil 0) (4 0 6 1 nil 0) (9 0 7 0 nil 0) (10 2 7 1 nil 0) (7 0 8 0 nil 0) (0 2 8 1 nil 0) (3 0 9 0 nil 0) (5 0 9 1 nil 0) (22 0 11 1 ((om-make-point 75 109) (om-make-point 465 109) (om-make-point 465 322) (om-make-point 465 507)) 0) (8 0 11 7 nil 0) (8 0 11 12 nil 0) (2 0 11 13 nil 0) (1 0 11 15 nil 0) (20 0 12 0 nil 0) (11 0 12 1 nil 0) (17 0 13 0 nil 0) (21 0 14 0 nil 0) (13 0 14 1 nil 0) (21 0 15 1 nil 0) (14 0 15 2 nil 0) (12 0 16 0 nil 0) (22 0 17 1 nil 0) (19 0 18 0 nil 0) (13 0 18 1 nil 0) (22 0 20 1 nil 0) (15 0 20 4 nil 0) (18 0 20 7 nil 0) (16 1 23 0 nil 0) (16 0 24 0 nil 0))) 1 "make matrices" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 3 0 nil 0) (2 0 3 2 nil 0) (3 0 4 0 nil 0) (7 0 9 0 nil 0) (8 0 9 1 nil 0) (6 0 9 2 nil 0))) nil 7.02))